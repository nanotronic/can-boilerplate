{
  "name": "can-compile",
  "description": "Compile CanJS Mustache and EJS views for lightning fast production apps",
  "version": "0.4.0",
  "homepage": "http://daffl.github.com/can-compile",
  "author": {
    "name": "David Luecke",
    "email": "daff@neyeon.com",
    "url": "http://daffl.github.com"
  },
  "main": "lib/index.js",
  "scripts": {
    "test": "mocha test"
  },
  "engines": {
    "node": "~0.10"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:daffl/can-compile.git"
  },
  "bin": {
    "can-compile": "./bin/can-compile"
  },
  "keywords": [
    "gruntplugin",
    "canjs"
  ],
  "devDependencies": {
    "expect.js": ">= 0.1.2",
    "mocha": "1.8.1",
    "grunt": "~ 0.4.0",
    "grunt-contrib-jshint": ">= 0.1.1",
    "grunt-release": "~0.5.1"
  },
  "dependencies": {
    "glob-whatev": "0.1.8",
    "commander": "1.1.1",
    "async": "0.1.22",
    "jsdom": "~0.5.6",
    "handlebars": "~1.0.12"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "readme": "# can-compile\n\nNodeJS module that compiles [CanJS](http://canjs.us/) EJS and Mustache views into a single JavaScript file for lightning fast\nproduction apps.\n\nWith NodeJS installed, just run NPM:\n\n> npm install can-compile -g\n\n## Command line\n\nThe `can-compile` command line tool takes a list of files (by default all `*.ejs` and `*.mustache` files in the current folder)\nor a list of [filename patterns](https://github.com/isaacs/minimatch) and writes the compiled views into an `out` file\n(default: `views.production.js`).\n\n__Examples:__\n\nCompile all EJS and Mustache files in the current folder and write them to `views.combined.js`:\n\n> can-compile --out views.combined.js\n\nCompile `todo.ejs` using CanJS version 1.1.2, write it to `views.production.js`:\n\n> can-compile todo.ejs --can 1.1.2\n\nCompile all EJS files in the current directory and all subdirectories and `mustache/test.mustache`.\nWrite the result to `views.combined.js`:\n\n> can-compile **/*.ejs mustache/test.mustache --out views.combined.js\n\n## Grunt task\n\ncan-compile also comes with a [Grunt](http://gruntjs.com) task so you can easily make it part of your production build.\nJust `npm install can-compile` in you project folder (or add it as a development dependency).\nThe following example shows a Gruntfile that compiles all Mustache views and then builds a concatenated and minified `production.js`\nof a CanJS application:\n\n```javascript\nmodule.exports = function (grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    cancompile: {\n      dist: {\n        src: ['**/*.ejs', '**/*.mustache'],\n        out: 'production/views.production.js',\n        wrapper: '!function() { {{{content}}} }();'\n      },\n      legacy: {\n        src: ['**/*.ejs', '**/*.mustache'],\n        out: 'production/views.production.js',\n        version: '1.1.2'\n      }\n    },\n    concat: {\n      dist: {\n        src: [\n          '../resources/js/can.jquery.js',\n          '../resources/js/can.view.mustache.js',\n          'js/app.js', // You app\n          '<%= cancompile.dist.out %>' // The compiled views\n        ],\n        dest: 'production/production.js'\n      }\n    },\n    uglify: {\n      dist: {\n        files: {\n          'production/production.min.js': ['<%= concat.dist.dest %>']\n        }\n      }\n    }\n  });\n\n  // Default task.\n  grunt.registerTask('default', ['cancompile', 'concat', 'uglify']);\n\n  grunt.loadNpmTasks('can-compile');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n};\n```\n\n## Programmatically\n\nYou can compie files directly like this:\n\n```javascript\nvar compiler = require('can-compile');\n\ncompiler.compile('file.ejs', function(error, output) {\n  output // -> compiled `file.ejs`\n});\n```\n\nPassing an object as the first parameter allows you the following configuration options:\n\n- `filename` {String}: The name of the file to be compiled\n- `version` {String} (default: `latest`): The CanJS version to be used\n- `log` {Function}: A logger function (e..g `console.log.bind(console)`)\n- `normalizer` {Function}: A Function that returns the normalized path name\n\n```javascript\ncompiler.compile({\n  filename: 'file.ejs',\n  log: console.log.bind(console),\n  normalizer: function(filename) {\n    return path.relative(__dirname, filename);\n  },\n  version: '1.1.6'\n}, function(error, output) {\n  output // -> compiled `file.ejs`\n});\n```\n\n## Loading with RequireJS\n\nTo use your pre-compile views with [RequireJS](http://requirejs.org/) just add a custom `wrapper` in the options\nthat uses the AMD definition to load `can/view/mustache` and/or `can/view/ejs` (depending on what you are using).\nIn a Grunt task:\n\n```javascript\nmodule.exports = function (grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    cancompile: {\n      dist: {\n        src: ['**/*.mustache'],\n        out: 'production/views.production.js',\n        wrapper: 'define([\"can/view/mustache\"], function(can) { {{{content}}} });'\n      }\n    }\n  });\n}\n```\n\n## Note\n\nAlways make sure that the output file is in the same folder as the root level for the views that are being loaded.\nSo if your CanJS applications HTML file is in the `app` folder within the current directory use a filename within\nthat folder as the output file:\n\n> can-compile --out app/views.production.js\n\n## Changelog\n\n__0.4.0:__\n\n- Verify CanJS 2.0.0 compatbility, load can.EJS which isn't in the core anymore\n\n__0.3.2:__\n\n- Custom `wrapper` option uses [Handlebars](http://handlebarsjs.com/) because Underscore templates are useless in Grunt files\n\n__0.3.1:__\n\n- Adds a custom `wrapper` option (uses [_.template](http://underscorejs.org/#template)).\n\n__0.3.0:__\n\n- Allows compilation for different CanJS versions\n\n__0.2.1:__\n\n- Switched to plain JSDom\n- Update to CanJS 1.1.5\n- Verified Node 0.10 compatibility\n\n__0.2.0:__\n\n- Grunt 0.4.0 compatibility\n- Added Travis CI\n\n__0.1.0:__\n\n- Initial release\n\n[![Build Status](https://travis-ci.org/daffl/can-compile.png?branch=master)](https://travis-ci.org/daffl/can-compile)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/daffl/can-compile/issues"
  },
  "_id": "can-compile@0.4.0",
  "_from": "can-compile@"
}
